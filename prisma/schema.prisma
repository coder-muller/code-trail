generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - BetterAuth
model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions       Session[]
  accounts       Account[]
  projects       Project[]
  projectMembers ProjectMember[]

  assignedTasks  Task[] @relation("AssignedTo")
  completedTasks Task[] @relation("CompletedBy")

  @@unique([email])
  @@map("user")
}

// Session model - BetterAuth

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

// Account model - BetterAuth
model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

// Verification model - BetterAuth
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Project model
model Project {
  id String @id @default(uuid())

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  projectMembers ProjectMember[]
  tasks          Task[]

  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project")
}

// Project role enum
enum ProjectRole {
  EDITOR
  VIEWER
}

// Project member model - Many-to-many relationship between users and projects
model ProjectMember {
  id String @id @default(uuid())

  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  role ProjectRole @default(VIEWER)

  @@unique([userId, projectId])
  @@map("project_member")
}

// Task model
model Task {
  id String @id @default(uuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  title       String
  description String?

  completedAt DateTime?

  completedBy     String?
  completedByUser User?   @relation("CompletedBy", fields: [completedBy], references: [id])

  assigneeId String?
  assignee   User?   @relation("AssignedTo", fields: [assigneeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@map("task")
}
